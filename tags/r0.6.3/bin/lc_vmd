##################################################################################
#
# Copyright (c)  2010 Nuno A. Fonseca (nunofonseca at acm.org), Max Pereira
#
#    This file is part of LogCHEM.
#
#    LogCHEM is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    LogCHEM is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with LogCHEM; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
##################################################################################
# $Id: lc_vmd,v 1.2 2010/06/30 14:54:51 nf Exp $
#exec wish "$0" -- ${1+"$@"}
package require Tk 8.4

#####################################################
# init variables 
global latom

set ligMolid -1
set ligAtom1 -1
set ligProc addLig
set bonds {}

# Automatically defined during instalation
set LOGCHEM_DIR "/home/nf/Research/Projects/WIP/logchem/LogCHEM2"

########################################################################################

# proc updateAction {} {
#     global molecule latom
#     global nchoice
#     if {$nchoice == 1} { 
# 	modmolec i 
#     } elseif {$nchoice == 2} {
# 	modmolec d 
#     } elseif {$nchoice ==3 } {
# 	mol on 0
# 	mouse mode 0

# 	buildRule
	
# 	catch {exec babel $::LOGCHEM_DIR/bin/newpattern.mol2 $::LogCHEM_DIR/bin/newpattern.sdf} msg
# 	# update background knowledge
	
# 	if {$dispattern == 1} {
# 	    set bk [open "$::LOGCHEM_DIR/pl/nctrer.b" a]
# 	    set p 0
# 	    set r [open "$::LOGCHEM_DIR/bin/newrule.yap"]
# 	    while {[gets $r nLine] >= 0} {
# 		if {$nLine == "%\[Rule\]"} {
# 		    puts $bk "%-------Prune---------" 
# 		    set p 1 
# 		} else {
# 		    if {$p == 1} {
# 			puts $bk "prune(($nLine"
# 			set p 0
# 		    } else {
# 			set point [string last . $nLine]      
# 			if {$point > 0} {
# 		     set linha [string range $nLine 0 [expr $point - 1]]
# 			    puts $bk "$linha))."  
# 			} else {
#                    puts $bk $nLine
# 			}
# 		    }
# 		}
# 	    } 
# 	    close $bk
# 	    close $r    
# 	} else {
# 	    set bk [open "$::LOGCHEM_DIR/pl/nctrer.b" a]
# 	    set p 0
# 	    puts $bk ":- set(refine,user)."
# 	    set t [open "$::LOGCHEM_DIR/bin/theory.yap"]
# 	    set r [open "$::LOGCHEM_DIR/bin/newrule.yap"]
# 	    while {[gets $t nLine] >= 0} {
# 		if {[string range $nLine 0 0] == "%"} {
# 		    puts $bk "%-------Refine operator---------"
# 		    set p 1
# 		} else {
# 		    if {$p == 1} {
# 			puts $bk "refine(($nLine"
# 			set p 0
# 		    } else {
# 			set point [string last . $nLine]      
# 			if {$point > 0} {
# 			    set linha [string range $nLine 0 [expr $point - 1]]
# 			    puts $bk "$linha),Clause):-"  
# 			} else {
# 			    puts $bk $nLine
# 			}
# 		    }
# 		}
# 	    }
# 	    while {[gets $r nLine] >= 0} {
# 		if {[string range $nLine 0 0] == "%"} {
# 		    set p 1
# 		} else {
# 		    if {$p == 1} {
# 			puts $bk "Clause = ($nLine"
# 			set p 0
# 		    } else {
# 			set point [string last . $nLine]      
# 			if {$point > 0} {
# 			    set linha [string range $nLine 0 [expr $point - 1]]
# 			    puts $bk "$linha)."  
# 			} else {
# 			    puts $bk $nLine
# 			}
# 		    }
#             }
# 	    }          
# 	    close $bk
# 	    close $t  
# 	    close $r           
# 	}
#     } else {	
# 	destroy .userScreen 
# 	catch {exit} msg
#     }
# }


########################################
# set the coordinates
set p [atomselect 0 all]

set lista {}
set latom {}
set lx {}
set ly {}
set countIndex 0 
set lx [$p get {x}]
set ly [$p get {y}]
foreach coord [$p get {x}] {
        set b [string first " " $coord]
        set l [string length $coord]
        set coordx [string range $coord 0 [expr $b - 1]]
        set coordy [string range $coord [expr $b + 1] $l]
        puts $countIndex
        puts [lindex $lx $countIndex]
        set mt [atomselect 1 "x eq [lindex $lx $countIndex] and y eq [lindex $ly $countIndex]"] 
        lappend latom [$mt get index]
        lappend lista $coord
        incr countIndex
}
##################################################################
array set lc_options {}
# label, show option (in menu), function to call
set lc_options(show_mol)     { "Close VMD" 0 lc_vmd_exit }
set lc_options(add_bonds)    { "Add Bonds" 1 lc_vmd_add_bonds }
set lc_options(remove_bonds) { "Remove Bonds" 1 lc_vmd_remove_bonds }
set lc_options(eval_pat)     { "Evaluate Pattern" 1 lc_vmd_eval_pat }
#set lc_options(refine_pat)   { "Refine Pattern"   1 lc_vmd_refine_pat }
set lc_options(discard_pat)  { "Discard Pattern"   1 lc_vmd_discard_pat }
set lc_options_list [list add_bonds remove_bonds eval_pat  discard_pat show_mol]
#set lc_options_list [list add_bonds remove_bonds eval_pat refine_pat discard_pat show_mol]
set vmd_cur_choice 1
proc option_window {} {
    global vmd_valid_ops
    global vmd_cur_choice
    global lc_options
    global lc_options_list
    toplevel .userScreen
    wm title .userScreen "Select an Action"
    wm geometry .userScreen 240x135+250+230
    
    set position 0
    foreach o $lc_options_list {
	set text [lindex $lc_options($o) 0]
	set cmd  [lindex $lc_options($o) 2]
	radiobutton .userScreen.b_$position -text $text -variable vmd_cur_choice -value $position -command $cmd
	pack .userScreen.b_$position -side top -anchor w
	incr position
    }
}

proc lc_vmd_exit {} {
    destroy .userScreen 
    catch {exit} msg
}
proc lc_vmd_add_bonds {} {
    modmolec i 
}
proc lc_vmd_remove_bonds {} {
    modmolec d 
}

proc lc_vmd_refine_pat {} {

}

proc lc_vmd_eval_pat {} {
    global vmd_ilp_dir
    global vmd_ilp_dataset
    global vmd_classes
    set dataset ""
    set rule [string trim [mol_to_rule] "."]
    # add to file
    set results ""
    puts stderr "lc_eval_pat $vmd_ilp_dir $vmd_ilp_dataset $rule"
    catch { 
	set results [exec lc_eval_pat "$vmd_ilp_dir" "$vmd_ilp_dataset" "$rule" ]
	set _ ""
    } err
    if {$err!=""} {
	puts stderr "status: $err"
    }
    set classes $vmd_classes
    set res   [split $results ","]
    set txt   ""
    set i 0
    foreach c $classes {
	set txt "${txt}$c [lindex $res $i]\n"
	incr i
    }
    #puts $rule
    #puts $txt
    # present the results
    set name .lc_res
    catch { destroy $name } 
    toplevel $name
    wm title $name   "Pattern Coverage"
    wm resizable $name 0 0
    if {[winfo viewable [winfo toplevel [winfo parent $name]]] } {
	wm transient $name [winfo toplevel [winfo parent .]]
    }
    pack [label  $name.l1 -text $txt -justify left ] -side top
    pack [label  $name.l2 -text "Add pattern to existing set of patterns?" -justify left ] -side top
    pack [frame  $name.f1 ] -side top -fill x 
    pack [button $name.f1.b1 -text "Yes" -command "save_rule $rule;destroy $name" ] -side left -anchor c
    pack [button $name.f1.b2 -text "No" -command "destroy $name" ] -side left -anchor c
    #do-info "$txt"
}

proc save_rule { rule } {
    global vmd_rules_file
    set fd [open $vmd_rules_file a+]
    if { $fd < 0 } {
	do-error "Unable to open $vmd_rules_file"
	return
    }
    #puts $fd "%user defined rule"
    puts $fd "$rule."
    close $fd
    do-info "Rule successfully added."
}

proc lc_vmd_discard_pat {} {
    global vmd_ilp_dir
    set rule [mol_to_rule]
    # add to file
    set body [string trim [regsub "active.A..." $rule ""] "."]
    set cfile "$vmd_ilp_dir/user_constraints.pl"
    set fd [open $cfile a+]
    if { $fd < 0 } {
	do-error "System error: unable to open $cfile."
	return
    }
    puts $fd ":-constraint(($body))."
    close $fd
    do-info "Contraint added (($body)). \n You need to rerun Aleph."
}

proc do-error {msg} {
    variable g	
    tk_messageBox -message "$msg" -title "Error" -icon error -type ok
}

proc do-info { msg } {
    variable g	
    tk_messageBox -message "$msg" -title "Info" -icon info -type ok
}

proc mol_to_rule {} {
    global vmd_files_dir
    global vmd_new_rule_file
    mol on 0
    mouse mode 0
    mol_to_mol2 $vmd_files_dir/.tmp.mol2
    set rule [mol2_to_rule $vmd_files_dir/.tmp.mol2 $vmd_new_rule_file]
    return $rule
}

proc mol2_to_rule { mol2file ofile } {
    global vmd_files_dir
    global molecule 
    global latom
    set letters {A B C D E F G H I J K L M N O P Q R S T U V X W Y Z}

    set bd [open "$vmd_files_dir/bonds.txt" r]
    set lb {}
    while {[gets $bd bLine] >= 0} {
	set xi [string trimleft [string range $bLine 0 2]]
	set yi [string trimleft [string range $bLine 3 5]]
	set bt [string trimleft [string range $bLine 6 8]]
	set vbt($xi,$yi) $bt
	lappend lb $xi$yi
    }
    close $bd
    
    set nm [open "$mol2file" r]
    set body ""
    set readAtom 0
    set readBond 0
    while {[gets $nm nmLine] >= 0} {
           if {$readBond} {
	       if {$nmLine != ""} {
		   set fAtom [string trimright [string range $nmLine 10 11]]
		   set lAtom [string trimright [string range $nmLine 16 17]]
		   set tLig [string range $nmLine 19 19]

		   if {[lsearch $lb $fAtom$lAtom] != -1} {
		       if {$tLig != $vbt($fAtom,$lAtom)} {
			   set tLig $vbt($fAtom,$lAtom)
		       }
		   }  		   
		   set body "$body,atom_bond(A,[lindex $letters $fAtom],[lindex $letters $lAtom],$vAtom($fAtom),$vAtom($lAtom),$tLig)"
	       } else {
		   break
	       }
           }        
           if {$readAtom} {
	       if {$nmLine != "@<TRIPOS>BOND"} {
		   set nAtom [string trimright [string range $nmLine 6 7]]
		   set element [string range $nmLine 9 9]
		   set element2 [string tolower [string range $nmLine 10 10]]
		   set element [string trim "$element$element2"]
		   puts "n: $nAtom   e: $element"
		   set vAtom($nAtom) "'$element'"
              } else {
                 set readBond 1 
                 set readAtom 0
		 set body "$body,atom(A,[lindex $letters 1],$vAtom(1))"
              }
           }
	if {$nmLine == "@<TRIPOS>ATOM"} {
	    set readAtom 1  
	}
    }  
    close $nm
    return "active(A):-[string trim $body ,]."
}
proc mol_to_mol2 { ofile } {
    global latom
    ################################################################
    # record a MOL2 file and then convert into a SDF file using Babel
    set e [atomselect 0 "all"]
    set mrp_molecule [atomselect 0 "index $latom"]
    
    foreach atomIndex $latom {
	set listBond {}
	set bondSingle [atomselect 1 "index $atomIndex"]
	lassign [$bondSingle getbonds] bondList
	
	foreach bondIndex $bondList {
	    set id [lsearch -exact $latom $bondIndex]
	    if { $id != -1 } {        
		lappend listBond $bondIndex
	    }
	}
	$bondSingle setbonds [list $listBond]
	$bondSingle delete
    }
    set fBonds [atomselect 1 "index $latom"]
    $fBonds writemol2 $ofile
    ################ MOL2 file created ################
    return
}

# init the trace and check the user option
proc modmolec {operation} {
  global ligMolid ligAtom1 ligProc molecule 
  
  set ligMolid -1
  set ligAtom1 -1
  
  uplevel #0 {trace remove variable vmd_pick_atom write ligTrace}

# insert a bond option 
  if { $operation == "i" } {
    mouse mode 4 2
    set ligProc addLig
    uplevel #0 {trace add variable vmd_pick_atom write ligTrace}
 
# delete a bond option
  } elseif { $operation == "d" } {
    mouse mode 4 2 
    set ligProc delLig
    uplevel #0 {trace add variable vmd_pick_atom write ligTrace}
  } else {
    error "options: i, d ou s"
  }
}


#-------------- Insert a bond between two atoms
proc addLig { molid atom1 atom2 } {
   global latom
   set ch 0

   if {$atom1 == $atom2 } {
     return
  }
  if { $atom1 > $atom2 } {
    set ch 1
    set tmp $atom1
    set atom1 $atom2
    set atom2 $tmp
  }
  set sel [atomselect $molid "index $atom1 $atom2"]
  lassign [$sel getbonds] bond1 bond2

  set id [lsearch -exact $bond1 $atom2]
  if { $id == -1 } {
    lappend bond1 $atom2
  }
  set id [lsearch -exact $bond2 $atom1]
  if { $id == -1 } {
    lappend bond2 $atom1
  }
  $sel setbonds [list $bond1 $bond2]

  if {$ch} {
     set findAtom [lsearch -exact $latom $atom1]
  } else {
     set findAtom [lsearch -exact $latom $atom2]
  }
  if {$findAtom == -1} {
     if {$ch} {
        lappend latom $atom1
     } else {
        lappend latom $atom2
     }
  }
  mol rep CPK 
  mol selection "index $atom1 $atom2"
  mol addrep 1 
  $sel delete
}


#-------------- delete a bond between two atoms
proc delLig { molid atom1 atom2 } {
  global latom

  if { $atom1 > $atom2 } {
    set tmp $atom1
    set atom1 $atom2
    set atom2 $tmp
  }
  set sel [atomselect $molid "index $atom1 $atom2"]
  lassign [$sel getbonds] bond1 bond2

  set id [lsearch -exact $bond1 $atom2]
  if { $id != -1 } {
    set bond1 [lreplace $bond1 $id $id ]
  }
  set id [lsearch -exact $bond2 $atom1]
  if { $id != -1 } {
    set bond2 [lreplace $bond2 $id $id ]
  }
  # $sel setbonds [list $bond1 $bond2]
  lappend bonds [list $bond1 $bond2]

  set nRep [molinfo 1 get numreps]
  for {set z 1} {$z < $nRep} {incr z} {
        mol delrep $z 1 
  }
  mol delrep 1 1
  set idatm [lsearch -exact $latom $atom1]
  set latom [lreplace $latom $idatm $idatm]
  mol rep CPK 
  mol selection "index $latom"
  mol addrep 1 
  $sel delete
}
# trace the atoms position selected in the molecule
proc ligTrace args {
  global ligProc ligMolid ligAtom1 vmd_pick_mol vmd_pick_atom
  if { $ligMolid == -1 } {
    set ligMolid $vmd_pick_mol
    set ligAtom1 $vmd_pick_atom 
    if {$ligProc == "delLig"} {catch {$ligProc $ligMolid $ligAtom1 $ligAtom1}}
  } else {
    catch {$ligProc $ligMolid $ligAtom1 $vmd_pick_atom}
    set ligMolid -1
    set ligAtom1 -1
  }
}

##################################################################
# VMD 
mol rep CPK
mol selection "index $latom"
mol addrep 1
mol off 0

#global dispattern
#set dispattern 0

##################################################################
option_window

