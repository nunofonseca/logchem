#exec wish "$0" -- ${1+"$@"}
package require Tk 8.4

#####################################################
# init variables 
global latom

set ligMolid -1
set ligAtom1 -1
set ligProc addLig
set bonds {}

set LOGCHEM_DIR     $env(LogCHEM_DIR)

########################################################################################

# trace the atoms position selected in the molecule
proc ligTrace args {
  global ligProc ligMolid ligAtom1 vmd_pick_mol vmd_pick_atom
  if { $ligMolid == -1 } {
    set ligMolid $vmd_pick_mol
    set ligAtom1 $vmd_pick_atom 
    if {$ligProc == "delLig"} {catch {$ligProc $ligMolid $ligAtom1 $ligAtom1}}
  } else {
    catch {$ligProc $ligMolid $ligAtom1 $vmd_pick_atom}
    set ligMolid -1
    set ligAtom1 -1
  }
}

# init the trace and check the user option
proc modmolec {operation} {
  global ligMolid ligAtom1 ligProc molecule 
  
  set ligMolid -1
  set ligAtom1 -1
  
  uplevel #0 {trace remove variable vmd_pick_atom write ligTrace}

# insert a bond option 
  if { $operation == "i" } {
    mouse mode 4 2
    set ligProc addLig
    uplevel #0 {trace add variable vmd_pick_atom write ligTrace}
 
# delete a bond option
  } elseif { $operation == "d" } {
    mouse mode 4 2 
    set ligProc delLig
    uplevel #0 {trace add variable vmd_pick_atom write ligTrace}

  } else {
    error "opções: i, d ou s"
  }
}

#-------------- Insert a bond between two atoms
proc addLig { molid atom1 atom2 } {
   global latom
   set ch 0

   if {$atom1 == $atom2 } {
     return
  }
  if { $atom1 > $atom2 } {
    set ch 1
    set tmp $atom1
    set atom1 $atom2
    set atom2 $tmp
  }
  set sel [atomselect $molid "index $atom1 $atom2"]
  lassign [$sel getbonds] bond1 bond2

  set id [lsearch -exact $bond1 $atom2]
  if { $id == -1 } {
    lappend bond1 $atom2
  }
  set id [lsearch -exact $bond2 $atom1]
  if { $id == -1 } {
    lappend bond2 $atom1
  }
  $sel setbonds [list $bond1 $bond2]

  if {$ch} {
     set findAtom [lsearch -exact $latom $atom1]
  } else {
     set findAtom [lsearch -exact $latom $atom2]
  }
  if {$findAtom == -1} {
     if {$ch} {
        lappend latom $atom1
     } else {
        lappend latom $atom2
     }
  }
  mol rep CPK 
  mol selection "index $atom1 $atom2"
  mol addrep 1 
  $sel delete
}


#-------------- delete a bond between two atoms
proc delLig { molid atom1 atom2 } {
  global latom

  if { $atom1 > $atom2 } {
    set tmp $atom1
    set atom1 $atom2
    set atom2 $tmp
  }
  set sel [atomselect $molid "index $atom1 $atom2"]
  lassign [$sel getbonds] bond1 bond2

  set id [lsearch -exact $bond1 $atom2]
  if { $id != -1 } {
    set bond1 [lreplace $bond1 $id $id ]
  }
  set id [lsearch -exact $bond2 $atom1]
  if { $id != -1 } {
    set bond2 [lreplace $bond2 $id $id ]
  }
  # $sel setbonds [list $bond1 $bond2]
  lappend bonds [list $bond1 $bond2]

  set nRep [molinfo 1 get numreps]
  for {set z 1} {$z < $nRep} {incr z} {
        mol delrep $z 1 
  }
  mol delrep 1 1
  set idatm [lsearch -exact $latom $atom1]
  set latom [lreplace $latom $idatm $idatm]
  mol rep CPK 
  mol selection "index $latom"
  mol addrep 1 
  $sel delete
}

proc updateAction {} {
    global molecule latom
    global nchoice
    if {$nchoice == 1} { 
	modmolec i 
    } elseif {$nchoice == 2} {
	modmolec d 
    } elseif {$nchoice ==3 } {
	mol on 0
	mouse mode 0

	# record a MOL2 file and then convert into a SDF file using Babel
	set e [atomselect 0 "all"]
	set mrp_molecule [atomselect 0 "index $latom"]
	
	foreach atomIndex $latom {
	    set listBond {}
	    set bondSingle [atomselect 1 "index $atomIndex"]
	    lassign [$bondSingle getbonds] bondList
	    
	    foreach bondIndex $bondList {
		set id [lsearch -exact $latom $bondIndex]
		if { $id != -1 } {        
		    lappend listBond $bondIndex
		}
	    }
	    $bondSingle setbonds [list $listBond]
	    $bondSingle delete
	}
	set fBonds [atomselect 1 "index $latom"]
	$fBonds writemol2 "$::LOGCHEM_DIR/bin/newpattern.mol2"
	buildRule
	
	catch {exec babel $::LOGCHEM_DIR/bin/newpattern.mol2 $::LogCHEM_DIR/bin/newpattern.sdf} msg
	# update background knowledge
	
	if {$dispattern == 1} {
	    set bk [open "$::LOGCHEM_DIR/pl/nctrer.b" a]
	    set p 0
	    set r [open "$::LOGCHEM_DIR/bin/newrule.yap"]
	    while {[gets $r nLine] >= 0} {
		if {$nLine == "%\[Rule\]"} {
		    puts $bk "%-------Prune---------" 
		    set p 1 
		} else {
		    if {$p == 1} {
			puts $bk "prune(($nLine"
			set p 0
		    } else {
			set point [string last . $nLine]      
			if {$point > 0} {
		     set linha [string range $nLine 0 [expr $point - 1]]
			    puts $bk "$linha))."  
			} else {
                   puts $bk $nLine
			}
		    }
		}
	    } 
	    close $bk
	    close $r    
	} else {
	    set bk [open "$::LOGCHEM_DIR/pl/nctrer.b" a]
	    set p 0
	    puts $bk ":- set(refine,user)."
	    set t [open "$::LOGCHEM_DIR/bin/theory.yap"]
	    set r [open "$::LOGCHEM_DIR/bin/newrule.yap"]
	    while {[gets $t nLine] >= 0} {
		if {[string range $nLine 0 0] == "%"} {
		    puts $bk "%-------Refine operator---------"
		    set p 1
		} else {
		    if {$p == 1} {
			puts $bk "refine(($nLine"
			set p 0
		    } else {
			set point [string last . $nLine]      
			if {$point > 0} {
			    set linha [string range $nLine 0 [expr $point - 1]]
			    puts $bk "$linha),Clause):-"  
			} else {
			    puts $bk $nLine
			}
		    }
		}
	    }
	    while {[gets $r nLine] >= 0} {
		if {[string range $nLine 0 0] == "%"} {
		    set p 1
		} else {
		    if {$p == 1} {
			puts $bk "Clause = ($nLine"
			set p 0
		    } else {
			set point [string last . $nLine]      
			if {$point > 0} {
			    set linha [string range $nLine 0 [expr $point - 1]]
			    puts $bk "$linha)."  
			} else {
			    puts $bk $nLine
			}
		    }
            }
	    }          
	    close $bk
	    close $t  
	    close $r           
	}
    } else {	
	destroy .userScreen 
	catch {exit} msg
    }
}

# Build a Prolog rule for the updated pattern
proc buildRule {} {
     set letters {A B C D E F G H I J K L M N O P Q R S T U V X W Y Z}

     set bd [open "$::LOGCHEM_DIR/config/mbonds.txt" r]
     set lb {}
     while {[gets $bd bLine] >= 0} {
           set xi [string trimleft [string range $bLine 0 2]]
           set yi [string trimleft [string range $bLine 3 5]]
           set bt [string trimleft [string range $bLine 6 8]]
           set vbt($xi,$yi) $bt
           lappend lb $xi$yi
     }
     close $bd

     set rule_filename "$::LOGCHEM_DIR/newrule.yap"

     set nm [open "$::LOGCHEM_DIR/bin/newpattern.mol2" r]
     set existRule [file exists "$rule_filename"]
     if {$existRule} {
        exec rm "$rule_filename"
     }
     set r [open "$rule_filename" a]
     set readAtom 0
     set readBond 0
     while {[gets $nm nmLine] >= 0} {
           if {$readBond} {
              if {$nmLine != ""} {
                 set fAtom [string trimright [string range $nmLine 10 11]]
                 set lAtom [string trimright [string range $nmLine 16 17]]
                 set tLig [string range $nmLine 19 19]

                 if {[lsearch $lb $fAtom$lAtom] != -1} {
                    if {$tLig != $vbt($fAtom,$lAtom)} {
                       set tLig $vbt($fAtom,$lAtom)
                    }
                 }  
                  
                 puts $r ","
                 puts -nonewline $r "       atom_bond(A,[lindex $letters $fAtom],[lindex $letters $lAtom],$vAtom($fAtom),$vAtom($lAtom),$tLig)"
              } else {
                 puts $r "))."
                 break
              }
           }        
           if {$readAtom} {
              if {$nmLine != "@<TRIPOS>BOND"} {
                 set nAtom [string trimright [string range $nmLine 6 7]]
                 set element [string range $nmLine 9 9]
                 puts "n: $nAtom   e: $element"
                 set vAtom($nAtom) [string tolower $element]
              } else {
                 set readBond 1 
                 set readAtom 0
                 puts $r "\%\[Rule\]"
                 puts $r "search_seed(("
                 puts -nonewline $r "       atom(A,[lindex $letters 1],$vAtom(1))"
              }
           }
           if {$nmLine == "@<TRIPOS>ATOM"} {
              set readAtom 1  
           }
     }  
     close $nm
     close $r
}

########################################
# set the coordinates
set p [atomselect 0 all]

set lista {}
set latom {}
set lx {}
set ly {}
set countIndex 0 
set lx [$p get {x}]
set ly [$p get {y}]
foreach coord [$p get {x}] {
        set b [string first " " $coord]
        set l [string length $coord]
        set coordx [string range $coord 0 [expr $b - 1]]
        set coordy [string range $coord [expr $b + 1] $l]
        puts $countIndex
        puts [lindex $lx $countIndex]
        set mt [atomselect 1 "x eq [lindex $lx $countIndex] and y eq [lindex $ly $countIndex]"] 
        lappend latom [$mt get index]
        lappend lista $coord
        incr countIndex
}

mol rep CPK
mol selection "index $latom"
mol addrep 1
mol off 0

global dispattern
set dispattern 0

#wm withdraw .
toplevel .userScreen
wm title .userScreen "Select an Action"
wm geometry .userScreen 240x85+250+230

set userList [list "Add Bonds      " 1 "Remove Bonds" 2 "Discard Pattern " 3 "Exit                 " 4]
set position 0
foreach {user nchoice} $userList {
   radiobutton .userScreen.b_$position -text $user -variable choice -value $nchoice -command [list updateAction]
   pack .userScreen.b_$position
   incr position
}
